import { NextApiRequest, NextApiResponse } from "next";
import OpenAI from "openai";

// Initialise OpenAI avec ta clÃ© API
const openai = new OpenAI({
  apiKey: process.env.OPENAI_API_KEY || "", // VÃ©rifie que ta clÃ© API est bien dÃ©finie dans .env.local
});

export default async function handler(req: NextApiRequest, res: NextApiResponse) {
  if (req.method === "POST") {
    try {
      const { conversation, response_format: initialResponseFormat } = req.body;
      const response_format = initialResponseFormat || "text";

      console.log("ğŸ“¨ RequÃªte reÃ§ue avec conversation:", JSON.stringify(conversation, null, 2));

      // VÃ©rifie qu'une conversation existe, sinon initialise avec un message de bienvenue
      const messages = conversation && conversation.length > 0 ? conversation : [
        { role: "assistant", content: "Bonjour ! Je suis Jooby, votre assistant virtuel. Comment puis-je vous aider aujourd'hui ?" }
      ];

      // Ajout du contexte pour amÃ©liorer les rÃ©ponses
      messages.unshift({
        role: "system",
        content: `Tu es Jooby, un assistant virtuel intelligent et amical. 
        Ton but est d'aider les utilisateurs avec des rÃ©ponses claires, prÃ©cises et utiles. 
        Si quelqu'un te pose une question ambiguÃ«, demande plus de prÃ©cisions. 
        Si quelqu'un parle d'emploi, adapte tes rÃ©ponses en fonction de son profil et pose-lui des questions pour mieux l'aider.`
      });

      const response = await openai.chat.completions.create({
        model: "gpt-4o",
        messages,
        max_tokens: 200,
        response_format: { type: response_format },
      });

      console.log("ğŸ”¹ RÃ©ponse OpenAI:", JSON.stringify(response, null, 2));

      const message = response.choices[0].message;

      // Envoie la rÃ©ponse Ã  l'utilisateur
      res.status(200).json({ message });

    } catch (error: unknown) {
      if (error instanceof Error) {
        console.error("ğŸš¨ Erreur OpenAI:", error.message);
        res.status(500).json({ error: "Ã‰chec de la communication avec OpenAI", details: error.message });
      } else {
        console.error("ğŸš¨ Erreur inconnue:", error);
        res.status(500).json({ error: "Une erreur inconnue s'est produite" });
      }
    }
  } else {
    res.status(405).json({ error: "MÃ©thode non autorisÃ©e" });
  }
}
